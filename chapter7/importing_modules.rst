.. _importing_modules:

#################
Importing Modules
#################

This section is about building and importing modules in Swift.  It's easy to do in Xcode.  Make a new project for a command line tool (or a Cocoa application, whatever).  

Do File > New > File and add a new Swift file in the project.  (Alternatively, drag an existing file into the project's FileView).

That file should have some code, like this:

.. sourcecode:: bash

    class C { var x = 5 }

``main.swift`` as generated by Xcode has ``println("Hello, World!")``, now add this:

.. sourcecode:: bash

    let c = C()
    println("c: " + String(c.x))
    
Build and run, and the console shows:

.. sourcecode:: bash

    Hello, World!
    c: 5
    Program ended with exit code: 0

No import statement is needed!
 
Really, you're supposed to use Xcode, but from the command line it isn't hard to compile and then import an Objective C module.

http://stackoverflow.com/questions/24131476/compiling-and-linking-swift-plus-objective-c-code-from-the-os-x-command-line

``C.h``

.. sourcecode:: bash

    #import <Cocoa/Cocoa.h>
    @interface C : NSObject
    @property (retain) NSString *c;
    @end

``C.m``

.. sourcecode:: bash

    import "C.h"

    @implementation C
    - (id)init {
      self = [super init];
      self.c = @"Hello world!";
      return self;
    }
    @end

.. sourcecode:: bash

    > xcrun clang C.m -o C.o -c
    >

clang (with the ``-c`` flag) gives us ``C.o``.  Now we write our Swift code:

``S.swift``

.. sourcecode:: bash

    let c = C()
    println(c.c)

To compile ``S.swift``, we need to do this:

.. sourcecode:: bash

    >xcrun swiftc -c S.swift -import-objc-header C.h\
     -F /System/Library/Frameworks -I/usr/include
 
The Framework is for ``Cocoa.h``.  I think the ``-I`` is for something that can generate the "bridging header" from ``C.h``.  What is emitted by the compiler is ``S.o``.  Now we just need to link and run:

.. sourcecode:: bash

    > xcrun swiftc -o app C.o S.o
    > ./app
    Hello world!
    >

So now the question becomes, is it possible to do this for a swift module?  So far I haven't found a way.  

And the second question is, using Xcode and making a Swift framework, can we do things that way?  So far, I haven't found a way to do that, either.